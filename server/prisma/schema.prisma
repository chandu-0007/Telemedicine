generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  phone      String    @unique
  name       String
  role       Role
  isVerified Boolean   @default(false)
  createdAt  DateTime  @default(now())
  address    String
  latitude   Float
  longitude  Float
  doctor     Doctor?
  patient    Patient?
  pharmacy   Pharmacy?
}

model Patient {
  id            Int            @id @default(autoincrement())
  userId        Int            @unique
  age           Int?
  gender        String?
  Appointments  Appointment[]
  calls         Call[]
  consultations Consultation[]
  records       HealthRecord[]
  user          User           @relation(fields: [userId], references: [id])
}

model HealthRecord {
  id        Int      @id @default(autoincrement())
  patientId Int
  type      String
  fileUrl   String?
  details   String?
  createdAt DateTime @default(now())
  patient   Patient  @relation(fields: [patientId], references: [id])
}

model Doctor {
  id             Int            @id @default(autoincrement())
  userId         Int            @unique
  registrationId String
  specialty      String?
  experience     Int?
  hospitalName   String?
  isAvailable    Boolean        @default(true)
  Appointments   Appointment[]
  calls          Call[]
  consultations  Consultation[]
  user           User           @relation(fields: [userId], references: [id])
}

model Appointment {
  id           Int           @id @default(autoincrement())
  doctorId     Int
  patientId    Int
  date         DateTime
  status       String        @default("pending")
  notes        String?
  doctor       Doctor        @relation(fields: [doctorId], references: [id])
  patient      Patient       @relation(fields: [patientId], references: [id])
  consultation Consultation?
}

model Consultation {
  id            Int          @id @default(autoincrement())
  doctorId      Int
  patientId     Int
  notes         String?
  createdAt     DateTime     @default(now())
  appointmentId Int?         @unique
  prescription  String?
  appointment   Appointment? @relation(fields: [appointmentId], references: [id])
  doctor        Doctor       @relation(fields: [doctorId], references: [id])
  patient       Patient      @relation(fields: [patientId], references: [id])
}

model Pharmacy {
  id        Int             @id @default(autoincrement())
  userId    Int             @unique
  licenseId String
  medicines MedicineStock[]
  user      User            @relation(fields: [userId], references: [id])
}

model MedicineStock {
  id         Int      @id @default(autoincrement())
  pharmacyId Int
  name       String
  quantity   Int
  updatedAt  DateTime @default(now())
  pharmacy   Pharmacy @relation(fields: [pharmacyId], references: [id])
}

model Call {
  id        Int       @id @default(autoincrement())
  doctorId  Int
  patientId Int
  startedAt DateTime  @default(now())
  endedAt   DateTime?
  doctor    Doctor    @relation(fields: [doctorId], references: [id])
  patient   Patient   @relation(fields: [patientId], references: [id])
}

enum Role {
  patient
  doctor
  pharmacy
}
